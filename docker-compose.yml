# Versión de la sintaxis de Docker Compose
version: '3.8'

services:
  # --- Servicio del Backend de Laravel (PHP-FPM) ---
  app:
    # Construye la imagen usando el Dockerfile especificado en el backend
    build:
      context: ./laravel-backend # Directorio del backend
      dockerfile: docker/backend/Dockerfile #
    container_name: ecom-app
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./laravel-backend:/var/www
      - app_vendor:/var/www/vendor # Volumen para persistir las dependencias de composer
    env_file:
      - ./laravel-backend/.env # Carga las variables de entorno del backend
    networks:
      - ecom_network

  # --- Servidor Web para el Backend (Nginx) ---
  nginx-backend:
    image: nginx:1.21-alpine #
    container_name: ecom-nginx-backend
    restart: unless-stopped
    ports:
      - "8080:80" # Expone la API en el puerto 8080 del host
    volumes:
      - ./laravel-backend:/var/www
      - ./laravel-backend/docker/nginx/default.conf:/etc/nginx/conf.d/default.conf #
    depends_on:
      - app
    networks:
      - ecom_network

  # --- Servicio del Frontend (Angular servido por Nginx) ---
  frontend:
    # Construye la imagen usando el Dockerfile que creamos en la carpeta del frontend
    build:
      context: ./frontend
    container_name: ecom-frontend
    restart: unless-stopped
    ports:
      - "4200:80" # Expone la App de Angular en el puerto 3000 del host
    networks:
      - ecom_network
    depends_on:
      - nginx-backend # Se asegura de que el backend se inicie primero

  # --- Base de Datos (PostgreSQL) ---
  db:
    image: postgres:15-alpine #
    container_name: ecom-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "54320:5432" #
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - ecom_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${DB_USERNAME} -d $${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Redis ---
  redis:
    image: redis:7-alpine #
    container_name: ecom-redis
    restart: unless-stopped
    ports:
      - "63790:6379" #
    networks:
      - ecom_network

# --- Red y Volúmenes ---
networks:
  ecom_network:
    driver: bridge

volumes:
  db_data:
    driver: local
  app_vendor: {} # Volumen anónimo para las dependencias de Composer